@{
    var count = 0;
}

@foreach (System.Reflection.PropertyInfo propertyInfo in Model.GetType().GetProperties())
{
    var DivStyle = "";
    var Type = "";
    var DivClass = "";
    var InputClass = "form-control";
    var DivId = "";
    var CardId = "";
    var GridName = "";
    var GridButtonId = "";
    var GridTabelId = "";
    var TableCustomClass = "";
    var Value = propertyInfo.GetValue(Model, null);
    var ValueClass = (dynamic)null;
    var ValueGrid = (dynamic)null;

    var Name = @propertyInfo.Name.Replace("_", "");
    var Id = @propertyInfo.Name;

    if (Name == "Id" && Value != null)
    {
        DivId = "Div" + Name + "_" + Value;

    } else if (Name == "Id")
    {
        DivId = "DivId";
    }


    if (count == 1)
    {
        DivStyle = "margin-top:94px;";
        count = 0;
    };

    var TypeSwitch = propertyInfo.PropertyType.UnderlyingSystemType.ToString();

    if (TypeSwitch.Contains("Nullable")) {

        var Start = TypeSwitch.IndexOf("[", 0) + "[".Length;
        var End = TypeSwitch.IndexOf("]", Start);
        TypeSwitch = TypeSwitch.Substring(Start, End - Start);

    };

    switch (TypeSwitch)
    {

        case "System.Int32":
            Type = "number";
            break;

        case "System.DateTime":
            Type = "date";
            break;

        case "System.Boolean":
            Type = "checkbox";
            DivClass = "float-left";
            count = 1;
            break;

        default:
            Type = "text";
            break;

    };

    if (propertyInfo.PropertyType.UnderlyingSystemType.ToString().Contains("Dnd.Exaltado") && !propertyInfo.PropertyType.UnderlyingSystemType.ToString().Contains("System.Collections.Generic.List"))
    {
        <div class="card card-outline card-dark">
            <div class="card-header">
                <b>@Name</b>
            </div>

            @{
                CardId = propertyInfo.PropertyType.Name.ToString();
            }




            <div class="card-body" id="@CardId">
                @foreach (System.Reflection.PropertyInfo propertyInfoClass in propertyInfo.PropertyType.UnderlyingSystemType.GetProperties())
                {

                    var TypeSwitchClass = propertyInfoClass.PropertyType.UnderlyingSystemType.ToString();

                    if (TypeSwitchClass.Contains("Nullable")) {

                        var Start = TypeSwitchClass.IndexOf("[", 0) + "[".Length;
                        var End = TypeSwitchClass.IndexOf("]", Start);
                        TypeSwitchClass = TypeSwitchClass.Substring(Start, End - Start);

                    };

                    switch (TypeSwitchClass)
                    {

                        case "System.Int32":
                            Type = "number";
                            break;

                        case "System.DateTime":
                            Type = "date";
                            break;

                        case "System.Boolean":
                            Type = "checkbox";
                            break;

                        default:
                            Type = "text";
                            break;

                    }

                    Name = propertyInfoClass.Name.Replace("_", "");
                    Id = propertyInfoClass.Name;

                    if (Value != null)
                        ValueClass = propertyInfoClass.GetValue(Value, null);

                    <div class="@DivClass" style="@DivStyle" id="@DivId">
                        <label for="@Id">@Name</label>
                        <input type="@Type" class="@InputClass" id="@Id" value="@ValueClass">
                        <label></label>
                    </div>
                }
            </div>
        </div>
    }
    else if (propertyInfo.PropertyType.UnderlyingSystemType.ToString().Contains("System.Collections.Generic.List"))
    {
        GridName = propertyInfo.PropertyType.UnderlyingSystemType.GetProperties()[2].PropertyType.Name.ToString();
        GridButtonId = "btn" + GridName;
        GridTabelId = "table" + GridName;
        TableCustomClass = "custom" + GridTabelId;

        <div id="@GridName" class="custom-grid">
            <label for="@GridTabelId">@GridName.Replace("_", "")</label>
            <button type="button" id="@GridButtonId" class="btn btn-outline-dark float-right">Add Line</button>

            <div class="dataTables_wrapper dt-bootstrap4">

                <div class="row">
                    <div class="col-sm-12">
                        <table id="@GridTabelId" class="table table-bordered table-striped dataTable @TableCustomClass" role="grid" data-toggle="data-table">

                            <thead>
                                <tr role="row">
                                    @foreach (System.Reflection.PropertyInfo propertyInfoGrid in propertyInfo.PropertyType.UnderlyingSystemType.GetProperties())
                                    {
                                        if (!propertyInfoGrid.PropertyType.FullName.Contains("System"))
                                        {
                                            @foreach (System.Reflection.PropertyInfo propertyInfoGridItens in propertyInfoGrid.PropertyType.UnderlyingSystemType.GetProperties())
                                            {
                                                <th class="@propertyInfoGridItens.Name">@propertyInfoGridItens.Name</th>
                                            }

                                        }

                                    }
                                </tr>

                            </thead>
                            <tbody>
                                @foreach (System.Reflection.PropertyInfo propertyInfoGrid in propertyInfo.PropertyType.UnderlyingSystemType.GetProperties())
                                {
                                    if (!propertyInfoGrid.PropertyType.FullName.Contains("System"))
                                    {
                                        if (Value != null)
                                        {
                                            foreach (var ValueArray in Value)
                                            {
                                                <tr role="row">
                                                    @foreach (System.Reflection.PropertyInfo propertyInfoGridItensArray in ValueArray.GetType().GetProperties())
                                                    {
                                                        ValueGrid = propertyInfoGridItensArray.GetValue(ValueArray);
                                                        Id = propertyInfoGridItensArray.Name;


                                                        var TypeSwitchGrid = propertyInfoGridItensArray.PropertyType.UnderlyingSystemType.ToString();

                                                        if (TypeSwitchGrid.Contains("Nullable")) {

                                                            var Start = TypeSwitchGrid.IndexOf("[", 0) + "[".Length;
                                                            var End = TypeSwitchGrid.IndexOf("]", Start);
                                                            TypeSwitchGrid = TypeSwitchGrid.Substring(Start, End - Start);

                                                        };

                                                        switch (TypeSwitchGrid)
                                                        {

                                                            case "System.Int32":
                                                                Type = "number";
                                                                break;

                                                            case "System.DateTime":
                                                                Type = "date";
                                                                break;

                                                            case "System.Boolean":
                                                                Type = "checkbox";
                                                                break;

                                                            default:
                                                                Type = "text";
                                                                break;

                                                        }

                                                        <td><input type="@Type" class="@InputClass" id="@Id" value="@ValueGrid"></td>
                                                    }
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            foreach (System.Reflection.PropertyInfo propertyInfoGridItens in propertyInfoGrid.PropertyType.UnderlyingSystemType.GetProperties())
                                            {
                                                Id = propertyInfoGridItens.Name;

                                                var TypeSwitchGrid = propertyInfoGridItens.PropertyType.UnderlyingSystemType.ToString();

                                                if (TypeSwitchGrid.Contains("Nullable")) {

                                                    var Start = TypeSwitchGrid.IndexOf("[", 0) + "[".Length;
                                                    var End = TypeSwitchGrid.IndexOf("]", Start);
                                                    TypeSwitchGrid = TypeSwitchGrid.Substring(Start, End - Start);

                                                };

                                                switch (TypeSwitchGrid)
                                                {

                                                    case "System.Int32":
                                                        Type = "number";
                                                        break;

                                                    case "System.DateTime":
                                                        Type = "date";
                                                        break;

                                                    case "System.Boolean":
                                                        Type = "checkbox";
                                                        break;

                                                    default:
                                                        Type = "text";
                                                        break;

                                                }

                                            <td><input type="@Type" class="@InputClass" id="@Id"></td>
                                        }
                                    }
                                }
                            }
                                </tbody>
                            </table>
                            <label>
                            </label>

                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="@DivClass" style="@DivStyle" id="@DivId">
                <label for="@Id">@Name</label>
                <input type="@Type" class="@InputClass" id="@Id" value="@Value">
                <label></label>
            </div>
        }

    }